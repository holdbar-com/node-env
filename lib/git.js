import { exec } from 'node:child_process';
export async function isClean(path) {
    const changes = await execAsync(path, 'git status --short');
    return changes.length === 0;
}
export async function getHash(path) {
    const [long] = await execAsync(path, 'git rev-parse HEAD');
    return long;
}
export async function tag(path, t) {
    return await execAsync(path, `git tag "${t}"`);
}
export async function getTag(path) {
    try {
        const [t] = await execAsync(path, 'git describe --exact-match --tags HEAD');
        return t;
    }
    catch (e) {
        if (e.message?.includes('fatal: no tag exactly matches ')) {
            return undefined;
        }
        throw e;
    }
}
export async function getTags(path) {
    return await execAsync(path, 'git tag --list');
}
export async function push(path) {
    return await execAsync(path, 'git push');
}
export async function pushTags(path) {
    return await execAsync(path, 'git push --tags');
}
function execAsync(path, cmd) {
    return new Promise((resolve, reject) => {
        exec(cmd, { cwd: path }, (err, stdout) => {
            if (err) {
                reject(err);
                return;
            }
            resolve(stdout.split('\n').slice(0, -1));
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2l0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZ2l0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUUxQyxNQUFNLENBQUMsS0FBSyxVQUFVLE9BQU8sQ0FBQyxJQUFZO0lBQ3hDLE1BQU0sT0FBTyxHQUFHLE1BQU0sU0FBUyxDQUFDLElBQUksRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0lBQzVELE9BQU8sT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7QUFDOUIsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsT0FBTyxDQUFDLElBQVk7SUFDeEMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sU0FBUyxDQUFDLElBQUksRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0lBQzNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsR0FBRyxDQUFDLElBQVksRUFBRSxDQUFTO0lBQy9DLE9BQU8sTUFBTSxTQUFTLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNqRCxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxNQUFNLENBQUMsSUFBWTtJQUN2QyxJQUFJO1FBQ0YsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sU0FBUyxDQUFDLElBQUksRUFBRSx3Q0FBd0MsQ0FBQyxDQUFDO1FBQzVFLE9BQU8sQ0FBQyxDQUFDO0tBQ1Y7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLElBQ0csQ0FBMEIsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUMzQyxnQ0FBZ0MsQ0FDakMsRUFDRDtZQUNBLE9BQU8sU0FBUyxDQUFDO1NBQ2xCO1FBQ0QsTUFBTSxDQUFDLENBQUM7S0FDVDtBQUNILENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLE9BQU8sQ0FBQyxJQUFZO0lBQ3hDLE9BQU8sTUFBTSxTQUFTLENBQUMsSUFBSSxFQUFFLGdCQUFnQixDQUFDLENBQUM7QUFDakQsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLElBQVk7SUFDckMsT0FBTyxNQUFNLFNBQVMsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDM0MsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsUUFBUSxDQUFDLElBQVk7SUFDekMsT0FBTyxNQUFNLFNBQVMsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztBQUNsRCxDQUFDO0FBRUQsU0FBUyxTQUFTLENBQUMsSUFBWSxFQUFFLEdBQVc7SUFDMUMsT0FBTyxJQUFJLE9BQU8sQ0FBVyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUMvQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3ZDLElBQUksR0FBRyxFQUFFO2dCQUNQLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDWixPQUFPO2FBQ1I7WUFDRCxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4ZWMgfSBmcm9tICdub2RlOmNoaWxkX3Byb2Nlc3MnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaXNDbGVhbihwYXRoOiBzdHJpbmcpIHtcbiAgY29uc3QgY2hhbmdlcyA9IGF3YWl0IGV4ZWNBc3luYyhwYXRoLCAnZ2l0IHN0YXR1cyAtLXNob3J0Jyk7XG4gIHJldHVybiBjaGFuZ2VzLmxlbmd0aCA9PT0gMDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEhhc2gocGF0aDogc3RyaW5nKSB7XG4gIGNvbnN0IFtsb25nXSA9IGF3YWl0IGV4ZWNBc3luYyhwYXRoLCAnZ2l0IHJldi1wYXJzZSBIRUFEJyk7XG4gIHJldHVybiBsb25nO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdGFnKHBhdGg6IHN0cmluZywgdDogc3RyaW5nKSB7XG4gIHJldHVybiBhd2FpdCBleGVjQXN5bmMocGF0aCwgYGdpdCB0YWcgXCIke3R9XCJgKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFRhZyhwYXRoOiBzdHJpbmcpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBbdF0gPSBhd2FpdCBleGVjQXN5bmMocGF0aCwgJ2dpdCBkZXNjcmliZSAtLWV4YWN0LW1hdGNoIC0tdGFncyBIRUFEJyk7XG4gICAgcmV0dXJuIHQ7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoXG4gICAgICAoZSBhcyB7IG1lc3NhZ2U/OiBzdHJpbmcgfSkubWVzc2FnZT8uaW5jbHVkZXMoXG4gICAgICAgICdmYXRhbDogbm8gdGFnIGV4YWN0bHkgbWF0Y2hlcyAnXG4gICAgICApXG4gICAgKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB0aHJvdyBlO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRUYWdzKHBhdGg6IHN0cmluZykge1xuICByZXR1cm4gYXdhaXQgZXhlY0FzeW5jKHBhdGgsICdnaXQgdGFnIC0tbGlzdCcpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHVzaChwYXRoOiBzdHJpbmcpIHtcbiAgcmV0dXJuIGF3YWl0IGV4ZWNBc3luYyhwYXRoLCAnZ2l0IHB1c2gnKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHB1c2hUYWdzKHBhdGg6IHN0cmluZykge1xuICByZXR1cm4gYXdhaXQgZXhlY0FzeW5jKHBhdGgsICdnaXQgcHVzaCAtLXRhZ3MnKTtcbn1cblxuZnVuY3Rpb24gZXhlY0FzeW5jKHBhdGg6IHN0cmluZywgY21kOiBzdHJpbmcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPHN0cmluZ1tdPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgZXhlYyhjbWQsIHsgY3dkOiBwYXRoIH0sIChlcnIsIHN0ZG91dCkgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShzdGRvdXQuc3BsaXQoJ1xcbicpLnNsaWNlKDAsIC0xKSk7XG4gICAgfSk7XG4gIH0pO1xufVxuIl19