import { relative, resolve } from 'node:path';
import ts from 'typescript';
export function compile(reporter, path) {
    const configFile = ts.readConfigFile(resolve(path, 'tsconfig.json'), (p) => ts.sys.readFile(p));
    if (configFile.error) {
        reportDiagnostic(reporter)(configFile.error);
        return { sourceFiles: [] };
    }
    const tsconfig = ts.parseJsonConfigFileContent(configFile.config, ts.sys, './');
    if (tsconfig.errors.length !== 0) {
        tsconfig.errors.forEach(reportDiagnostic(reporter));
        return { sourceFiles: [] };
    }
    const program = ts.createProgram(tsconfig.fileNames, {
        ...tsconfig.options,
        listEmittedFiles: true,
        outDir: path,
        rootDir: path,
        typeRoots: [resolve(path, 'node_modules/@types')],
    });
    const sourceFiles = program
        .getSourceFiles()
        .map((sf) => relative(path, sf.fileName));
    const diagnostics = ts.getPreEmitDiagnostics(program);
    diagnostics.forEach(reportDiagnostic(reporter));
    const emitResult = program.emit();
    emitResult.diagnostics.forEach(reportDiagnostic(reporter));
    if (diagnostics.length !== 0 ||
        emitResult.diagnostics.length !== 0 ||
        emitResult.emitSkipped) {
        return { sourceFiles };
    }
    return {
        sourceFiles,
        outputFiles: emitResult.emittedFiles?.map((f) => relative(path, f)),
    };
}
function reportDiagnostic(reporter) {
    return (diagnostic) => {
        const { line, character } = (diagnostic.start &&
            // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
            diagnostic.file?.getLineAndCharacterOfPosition(diagnostic.start)) ||
            {};
        reporter.error(ts.flattenDiagnosticMessageText(diagnostic.messageText, '\n'), diagnostic.file?.fileName, line, character);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb21waWxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUM5QyxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFHNUIsTUFBTSxVQUFVLE9BQU8sQ0FBQyxRQUFrQixFQUFFLElBQVk7SUFDdEQsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FDekUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQ25CLENBQUM7SUFDRixJQUFJLFVBQVUsQ0FBQyxLQUFLLEVBQUU7UUFDcEIsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdDLE9BQU8sRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLENBQUM7S0FDNUI7SUFFRCxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsMEJBQTBCLENBQzVDLFVBQVUsQ0FBQyxNQUFNLEVBQ2pCLEVBQUUsQ0FBQyxHQUFHLEVBQ04sSUFBSSxDQUNMLENBQUM7SUFDRixJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUNoQyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ3BELE9BQU8sRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLENBQUM7S0FDNUI7SUFFRCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUU7UUFDbkQsR0FBRyxRQUFRLENBQUMsT0FBTztRQUNuQixnQkFBZ0IsRUFBRSxJQUFJO1FBQ3RCLE1BQU0sRUFBRSxJQUFJO1FBQ1osT0FBTyxFQUFFLElBQUk7UUFDYixTQUFTLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLHFCQUFxQixDQUFDLENBQUM7S0FDbEQsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxXQUFXLEdBQUcsT0FBTztTQUN4QixjQUFjLEVBQUU7U0FDaEIsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBRTVDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0RCxXQUFXLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDaEQsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2xDLFVBQVUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDM0QsSUFDRSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUM7UUFDeEIsVUFBVSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEtBQUssQ0FBQztRQUNuQyxVQUFVLENBQUMsV0FBVyxFQUN0QjtRQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsQ0FBQztLQUN4QjtJQUNELE9BQU87UUFDTCxXQUFXO1FBQ1gsV0FBVyxFQUFFLFVBQVUsQ0FBQyxZQUFZLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ3BFLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBUyxnQkFBZ0IsQ0FBQyxRQUFrQjtJQUMxQyxPQUFPLENBQUMsVUFBeUIsRUFBRSxFQUFFO1FBQ25DLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEdBQ3ZCLENBQUMsVUFBVSxDQUFDLEtBQUs7WUFDZix3RUFBd0U7WUFDeEUsVUFBVSxDQUFDLElBQUksRUFBRSw2QkFBNkIsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbkUsRUFBRSxDQUFDO1FBQ0wsUUFBUSxDQUFDLEtBQUssQ0FDWixFQUFFLENBQUMsNEJBQTRCLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsRUFDN0QsVUFBVSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQ3pCLElBQUksRUFDSixTQUFTLENBQ1YsQ0FBQztJQUNKLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZWxhdGl2ZSwgcmVzb2x2ZSB9IGZyb20gJ25vZGU6cGF0aCc7XG5pbXBvcnQgdHMgZnJvbSAndHlwZXNjcmlwdCc7XG5pbXBvcnQgeyBSZXBvcnRlciB9IGZyb20gJy4vcmVwb3J0ZXIuanMnO1xuXG5leHBvcnQgZnVuY3Rpb24gY29tcGlsZShyZXBvcnRlcjogUmVwb3J0ZXIsIHBhdGg6IHN0cmluZykge1xuICBjb25zdCBjb25maWdGaWxlID0gdHMucmVhZENvbmZpZ0ZpbGUocmVzb2x2ZShwYXRoLCAndHNjb25maWcuanNvbicpLCAocCkgPT5cbiAgICB0cy5zeXMucmVhZEZpbGUocClcbiAgKTtcbiAgaWYgKGNvbmZpZ0ZpbGUuZXJyb3IpIHtcbiAgICByZXBvcnREaWFnbm9zdGljKHJlcG9ydGVyKShjb25maWdGaWxlLmVycm9yKTtcbiAgICByZXR1cm4geyBzb3VyY2VGaWxlczogW10gfTtcbiAgfVxuXG4gIGNvbnN0IHRzY29uZmlnID0gdHMucGFyc2VKc29uQ29uZmlnRmlsZUNvbnRlbnQoXG4gICAgY29uZmlnRmlsZS5jb25maWcsXG4gICAgdHMuc3lzLFxuICAgICcuLydcbiAgKTtcbiAgaWYgKHRzY29uZmlnLmVycm9ycy5sZW5ndGggIT09IDApIHtcbiAgICB0c2NvbmZpZy5lcnJvcnMuZm9yRWFjaChyZXBvcnREaWFnbm9zdGljKHJlcG9ydGVyKSk7XG4gICAgcmV0dXJuIHsgc291cmNlRmlsZXM6IFtdIH07XG4gIH1cblxuICBjb25zdCBwcm9ncmFtID0gdHMuY3JlYXRlUHJvZ3JhbSh0c2NvbmZpZy5maWxlTmFtZXMsIHtcbiAgICAuLi50c2NvbmZpZy5vcHRpb25zLFxuICAgIGxpc3RFbWl0dGVkRmlsZXM6IHRydWUsXG4gICAgb3V0RGlyOiBwYXRoLFxuICAgIHJvb3REaXI6IHBhdGgsXG4gICAgdHlwZVJvb3RzOiBbcmVzb2x2ZShwYXRoLCAnbm9kZV9tb2R1bGVzL0B0eXBlcycpXSxcbiAgfSk7XG4gIGNvbnN0IHNvdXJjZUZpbGVzID0gcHJvZ3JhbVxuICAgIC5nZXRTb3VyY2VGaWxlcygpXG4gICAgLm1hcCgoc2YpID0+IHJlbGF0aXZlKHBhdGgsIHNmLmZpbGVOYW1lKSk7XG5cbiAgY29uc3QgZGlhZ25vc3RpY3MgPSB0cy5nZXRQcmVFbWl0RGlhZ25vc3RpY3MocHJvZ3JhbSk7XG4gIGRpYWdub3N0aWNzLmZvckVhY2gocmVwb3J0RGlhZ25vc3RpYyhyZXBvcnRlcikpO1xuICBjb25zdCBlbWl0UmVzdWx0ID0gcHJvZ3JhbS5lbWl0KCk7XG4gIGVtaXRSZXN1bHQuZGlhZ25vc3RpY3MuZm9yRWFjaChyZXBvcnREaWFnbm9zdGljKHJlcG9ydGVyKSk7XG4gIGlmIChcbiAgICBkaWFnbm9zdGljcy5sZW5ndGggIT09IDAgfHxcbiAgICBlbWl0UmVzdWx0LmRpYWdub3N0aWNzLmxlbmd0aCAhPT0gMCB8fFxuICAgIGVtaXRSZXN1bHQuZW1pdFNraXBwZWRcbiAgKSB7XG4gICAgcmV0dXJuIHsgc291cmNlRmlsZXMgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHNvdXJjZUZpbGVzLFxuICAgIG91dHB1dEZpbGVzOiBlbWl0UmVzdWx0LmVtaXR0ZWRGaWxlcz8ubWFwKChmKSA9PiByZWxhdGl2ZShwYXRoLCBmKSksXG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlcG9ydERpYWdub3N0aWMocmVwb3J0ZXI6IFJlcG9ydGVyKSB7XG4gIHJldHVybiAoZGlhZ25vc3RpYzogdHMuRGlhZ25vc3RpYykgPT4ge1xuICAgIGNvbnN0IHsgbGluZSwgY2hhcmFjdGVyIH0gPVxuICAgICAgKGRpYWdub3N0aWMuc3RhcnQgJiZcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9wcmVmZXItbnVsbGlzaC1jb2FsZXNjaW5nXG4gICAgICAgIGRpYWdub3N0aWMuZmlsZT8uZ2V0TGluZUFuZENoYXJhY3Rlck9mUG9zaXRpb24oZGlhZ25vc3RpYy5zdGFydCkpIHx8XG4gICAgICB7fTtcbiAgICByZXBvcnRlci5lcnJvcihcbiAgICAgIHRzLmZsYXR0ZW5EaWFnbm9zdGljTWVzc2FnZVRleHQoZGlhZ25vc3RpYy5tZXNzYWdlVGV4dCwgJ1xcbicpLFxuICAgICAgZGlhZ25vc3RpYy5maWxlPy5maWxlTmFtZSxcbiAgICAgIGxpbmUsXG4gICAgICBjaGFyYWN0ZXJcbiAgICApO1xuICB9O1xufVxuIl19