import { spellCheckFile } from 'cspell-lib';
import { readFile } from 'node:fs/promises';
import { join, resolve } from 'node:path';
export function isSpellingDictionaryFile(files) {
    return files.length === 1 && files[0] === 'dictionary.txt';
}
export async function spelling(reporter, path, files) {
    const words = [...commonInducedWords, ...(await readWords(path))];
    const results = await Promise.all(['package.json', ...files].map((file) => spellCheckFile(resolve(path, file), { generateSuggestions: false }, { noConfigSearch: true, words })));
    const errors = results.flatMap((r, ix) => (r.errors ?? []).map((error) => ({ file: files[ix], error })));
    if (errors.length !== 0) {
        for (const e of errors) {
            reporter.fatal('Unexpected error checking spelling.', e.error, e.file);
        }
        return false;
    }
    const issues = results.flatMap((r, ix) => r.issues.map((issue) => ({
        file: files[ix],
        issue,
    })));
    if (issues.length !== 0) {
        for (const i of issues) {
            reporter.error(i.issue.message ?? 'Unknown word: ' + i.issue.text, i.file, i.issue.line.position && i.issue.line.position.line + 1);
        }
        return false;
    }
    return true;
}
const commonInducedWords = ['camelcase', 'postpublish'];
async function readWords(dir) {
    try {
        const dictionary = await readFile(join(dir, 'dictionary.txt'));
        return dictionary
            .toString('utf8')
            .split('\n')
            .filter((l) => !!l)
            .map((l) => l.trim());
    }
    catch (e) {
        if (isNotFound(e)) {
            return [];
        }
        throw e;
    }
}
function isNotFound(e) {
    return e.code === 'ENOENT';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlbGxpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzcGVsbGluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQW1CLGNBQWMsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUM3RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDNUMsT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFHMUMsTUFBTSxVQUFVLHdCQUF3QixDQUFDLEtBQWU7SUFDdEQsT0FBTyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssZ0JBQWdCLENBQUM7QUFDN0QsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsUUFBUSxDQUM1QixRQUFrQixFQUNsQixJQUFZLEVBQ1osS0FBZTtJQUVmLE1BQU0sS0FBSyxHQUFHLENBQUMsR0FBRyxrQkFBa0IsRUFBRSxHQUFHLENBQUMsTUFBTSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xFLE1BQU0sT0FBTyxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FDL0IsQ0FBQyxjQUFjLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUN0QyxjQUFjLENBQ1osT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFDbkIsRUFBRSxtQkFBbUIsRUFBRSxLQUFLLEVBQUUsRUFDOUIsRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUNoQyxDQUNGLENBQ0YsQ0FBQztJQUNGLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FDdkMsQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUM5RCxDQUFDO0lBQ0YsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUN2QixLQUFLLE1BQU0sQ0FBQyxJQUFJLE1BQU0sRUFBRTtZQUN0QixRQUFRLENBQUMsS0FBSyxDQUFDLHFDQUFxQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3hFO1FBQ0QsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUNELE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FDdkMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQ1YsQ0FBQyxLQUFrRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZFLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQ2YsS0FBSztLQUNOLENBQUMsQ0FDSCxDQUNGLENBQUM7SUFDRixJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ3ZCLEtBQUssTUFBTSxDQUFDLElBQUksTUFBTSxFQUFFO1lBQ3RCLFFBQVEsQ0FBQyxLQUFLLENBQ1osQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLElBQUksZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQ2xELENBQUMsQ0FBQyxJQUFJLEVBQ04sQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUN4RCxDQUFDO1NBQ0g7UUFDRCxPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLFdBQVcsRUFBRSxhQUFhLENBQUMsQ0FBQztBQUV4RCxLQUFLLFVBQVUsU0FBUyxDQUFDLEdBQVc7SUFDbEMsSUFBSTtRQUNGLE1BQU0sVUFBVSxHQUFHLE1BQU0sUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1FBQy9ELE9BQU8sVUFBVTthQUNkLFFBQVEsQ0FBQyxNQUFNLENBQUM7YUFDaEIsS0FBSyxDQUFDLElBQUksQ0FBQzthQUNYLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0tBQ3pCO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNqQixPQUFPLEVBQUUsQ0FBQztTQUNYO1FBQ0QsTUFBTSxDQUFDLENBQUM7S0FDVDtBQUNILENBQUM7QUFFRCxTQUFTLFVBQVUsQ0FBQyxDQUFVO0lBQzVCLE9BQVEsQ0FBdUIsQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDO0FBQ3BELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWYWxpZGF0aW9uSXNzdWUsIHNwZWxsQ2hlY2tGaWxlIH0gZnJvbSAnY3NwZWxsLWxpYic7XG5pbXBvcnQgeyByZWFkRmlsZSB9IGZyb20gJ25vZGU6ZnMvcHJvbWlzZXMnO1xuaW1wb3J0IHsgam9pbiwgcmVzb2x2ZSB9IGZyb20gJ25vZGU6cGF0aCc7XG5pbXBvcnQgeyBSZXBvcnRlciB9IGZyb20gJy4vcmVwb3J0ZXIuanMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNTcGVsbGluZ0RpY3Rpb25hcnlGaWxlKGZpbGVzOiBzdHJpbmdbXSkge1xuICByZXR1cm4gZmlsZXMubGVuZ3RoID09PSAxICYmIGZpbGVzWzBdID09PSAnZGljdGlvbmFyeS50eHQnO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3BlbGxpbmcoXG4gIHJlcG9ydGVyOiBSZXBvcnRlcixcbiAgcGF0aDogc3RyaW5nLFxuICBmaWxlczogc3RyaW5nW11cbikge1xuICBjb25zdCB3b3JkcyA9IFsuLi5jb21tb25JbmR1Y2VkV29yZHMsIC4uLihhd2FpdCByZWFkV29yZHMocGF0aCkpXTtcbiAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgIFsncGFja2FnZS5qc29uJywgLi4uZmlsZXNdLm1hcCgoZmlsZSkgPT5cbiAgICAgIHNwZWxsQ2hlY2tGaWxlKFxuICAgICAgICByZXNvbHZlKHBhdGgsIGZpbGUpLFxuICAgICAgICB7IGdlbmVyYXRlU3VnZ2VzdGlvbnM6IGZhbHNlIH0sXG4gICAgICAgIHsgbm9Db25maWdTZWFyY2g6IHRydWUsIHdvcmRzIH1cbiAgICAgIClcbiAgICApXG4gICk7XG4gIGNvbnN0IGVycm9ycyA9IHJlc3VsdHMuZmxhdE1hcCgociwgaXgpID0+XG4gICAgKHIuZXJyb3JzID8/IFtdKS5tYXAoKGVycm9yKSA9PiAoeyBmaWxlOiBmaWxlc1tpeF0sIGVycm9yIH0pKVxuICApO1xuICBpZiAoZXJyb3JzLmxlbmd0aCAhPT0gMCkge1xuICAgIGZvciAoY29uc3QgZSBvZiBlcnJvcnMpIHtcbiAgICAgIHJlcG9ydGVyLmZhdGFsKCdVbmV4cGVjdGVkIGVycm9yIGNoZWNraW5nIHNwZWxsaW5nLicsIGUuZXJyb3IsIGUuZmlsZSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBpc3N1ZXMgPSByZXN1bHRzLmZsYXRNYXAoKHIsIGl4KSA9PlxuICAgIHIuaXNzdWVzLm1hcChcbiAgICAgIChpc3N1ZTogVmFsaWRhdGlvbklzc3VlICYgeyBsaW5lOiB7IHBvc2l0aW9uPzogeyBsaW5lOiBudW1iZXIgfSB9IH0pID0+ICh7XG4gICAgICAgIGZpbGU6IGZpbGVzW2l4XSxcbiAgICAgICAgaXNzdWUsXG4gICAgICB9KVxuICAgIClcbiAgKTtcbiAgaWYgKGlzc3Vlcy5sZW5ndGggIT09IDApIHtcbiAgICBmb3IgKGNvbnN0IGkgb2YgaXNzdWVzKSB7XG4gICAgICByZXBvcnRlci5lcnJvcihcbiAgICAgICAgaS5pc3N1ZS5tZXNzYWdlID8/ICdVbmtub3duIHdvcmQ6ICcgKyBpLmlzc3VlLnRleHQsXG4gICAgICAgIGkuZmlsZSxcbiAgICAgICAgaS5pc3N1ZS5saW5lLnBvc2l0aW9uICYmIGkuaXNzdWUubGluZS5wb3NpdGlvbi5saW5lICsgMVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5jb25zdCBjb21tb25JbmR1Y2VkV29yZHMgPSBbJ2NhbWVsY2FzZScsICdwb3N0cHVibGlzaCddO1xuXG5hc3luYyBmdW5jdGlvbiByZWFkV29yZHMoZGlyOiBzdHJpbmcpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBkaWN0aW9uYXJ5ID0gYXdhaXQgcmVhZEZpbGUoam9pbihkaXIsICdkaWN0aW9uYXJ5LnR4dCcpKTtcbiAgICByZXR1cm4gZGljdGlvbmFyeVxuICAgICAgLnRvU3RyaW5nKCd1dGY4JylcbiAgICAgIC5zcGxpdCgnXFxuJylcbiAgICAgIC5maWx0ZXIoKGwpID0+ICEhbClcbiAgICAgIC5tYXAoKGwpID0+IGwudHJpbSgpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChpc05vdEZvdW5kKGUpKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHRocm93IGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNOb3RGb3VuZChlOiB1bmtub3duKSB7XG4gIHJldHVybiAoZSBhcyB7IGNvZGU/OiBzdHJpbmcgfSkuY29kZSA9PT0gJ0VOT0VOVCc7XG59XG4iXX0=