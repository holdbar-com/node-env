import { readFile, writeFile } from 'node:fs/promises';
export async function sync() {
    try {
        const license = await readFile('LICENSE', 'utf-8');
        const thisYear = new Date().getFullYear();
        let changed = false;
        const updated = license.replaceAll(/Copyright © ([0-9]{4})(-[0-9]{4})? /gu, (all, year, negativeYearTo) => {
            if (negativeYearTo !== undefined) {
                if (Number(negativeYearTo) + thisYear === 0) {
                    return all;
                }
                changed = true;
                return `Copyright © ${year}-${thisYear} `;
            }
            if (Number(year) !== thisYear) {
                changed = true;
                return `Copyright © ${year}-${thisYear} `;
            }
            return all;
        });
        if (changed) {
            await writeFile('LICENSE', updated, 'utf-8');
        }
    }
    catch (e) {
        if (isFileNotFound(e)) {
            return;
        }
        throw e;
    }
}
function isFileNotFound(e) {
    return e.code === 'ENOENT';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hyb25vLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2hyb25vLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFdkQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJO0lBQ3hCLElBQUk7UUFDRixNQUFNLE9BQU8sR0FBRyxNQUFNLFFBQVEsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDbkQsTUFBTSxRQUFRLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUMxQyxJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDcEIsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FDaEMsdUNBQXVDLEVBQ3ZDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsRUFBRTtZQUM1QixJQUFJLGNBQWMsS0FBSyxTQUFTLEVBQUU7Z0JBQ2hDLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxHQUFHLFFBQVEsS0FBSyxDQUFDLEVBQUU7b0JBQzNDLE9BQU8sR0FBRyxDQUFDO2lCQUNaO2dCQUNELE9BQU8sR0FBRyxJQUFJLENBQUM7Z0JBQ2YsT0FBTyxlQUFlLElBQUksSUFBSSxRQUFRLEdBQUcsQ0FBQzthQUMzQztZQUNELElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLFFBQVEsRUFBRTtnQkFDN0IsT0FBTyxHQUFHLElBQUksQ0FBQztnQkFDZixPQUFPLGVBQWUsSUFBSSxJQUFJLFFBQVEsR0FBRyxDQUFDO2FBQzNDO1lBQ0QsT0FBTyxHQUFHLENBQUM7UUFDYixDQUFDLENBQ0YsQ0FBQztRQUNGLElBQUksT0FBTyxFQUFFO1lBQ1gsTUFBTSxTQUFTLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztTQUM5QztLQUNGO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixJQUFJLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNyQixPQUFPO1NBQ1I7UUFDRCxNQUFNLENBQUMsQ0FBQztLQUNUO0FBQ0gsQ0FBQztBQUVELFNBQVMsY0FBYyxDQUFDLENBQVU7SUFDaEMsT0FBUSxDQUF1QixDQUFDLElBQUksS0FBSyxRQUFRLENBQUM7QUFDcEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlYWRGaWxlLCB3cml0ZUZpbGUgfSBmcm9tICdub2RlOmZzL3Byb21pc2VzJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN5bmMoKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgbGljZW5zZSA9IGF3YWl0IHJlYWRGaWxlKCdMSUNFTlNFJywgJ3V0Zi04Jyk7XG4gICAgY29uc3QgdGhpc1llYXIgPSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCk7XG4gICAgbGV0IGNoYW5nZWQgPSBmYWxzZTtcbiAgICBjb25zdCB1cGRhdGVkID0gbGljZW5zZS5yZXBsYWNlQWxsKFxuICAgICAgL0NvcHlyaWdodCDCqSAoWzAtOV17NH0pKC1bMC05XXs0fSk/IC9ndSxcbiAgICAgIChhbGwsIHllYXIsIG5lZ2F0aXZlWWVhclRvKSA9PiB7XG4gICAgICAgIGlmIChuZWdhdGl2ZVllYXJUbyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKE51bWJlcihuZWdhdGl2ZVllYXJUbykgKyB0aGlzWWVhciA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGFsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIGBDb3B5cmlnaHQgwqkgJHt5ZWFyfS0ke3RoaXNZZWFyfSBgO1xuICAgICAgICB9XG4gICAgICAgIGlmIChOdW1iZXIoeWVhcikgIT09IHRoaXNZZWFyKSB7XG4gICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIGBDb3B5cmlnaHQgwqkgJHt5ZWFyfS0ke3RoaXNZZWFyfSBgO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbGw7XG4gICAgICB9XG4gICAgKTtcbiAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgYXdhaXQgd3JpdGVGaWxlKCdMSUNFTlNFJywgdXBkYXRlZCwgJ3V0Zi04Jyk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGlzRmlsZU5vdEZvdW5kKGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRocm93IGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNGaWxlTm90Rm91bmQoZTogdW5rbm93bikge1xuICByZXR1cm4gKGUgYXMgeyBjb2RlPzogc3RyaW5nIH0pLmNvZGUgPT09ICdFTk9FTlQnO1xufVxuIl19