import { relative } from 'node:path';
import ts from 'typescript';
export function watch(filesChanged) {
    const watchFile = ts.sys.watchFile?.bind(ts.sys);
    if (!watchFile) {
        throw new Error('watchFile missing from typescript sys');
    }
    const watchers = ['package.json', 'package-lock.json', 'dictionary.txt'].map((file) => watchFile(file, () => {
        filesChanged(true, [file], []).catch((e) => {
            console.error('Error handling file changes:');
            console.error(e);
        });
    }, 500));
    const host = ts.createWatchCompilerHost('tsconfig.json', {
        listEmittedFiles: true,
    }, ts.sys, undefined, undefined, undefined, {
        excludeFiles: ['package.json'],
    });
    host.afterProgramCreate = (programBuilder) => {
        const program = programBuilder.getProgram();
        const diagnostics = ts.getPreEmitDiagnostics(program);
        diagnostics.forEach(dumpDiagnostic);
        const emitResult = program.emit();
        emitResult.diagnostics.forEach(dumpDiagnostic);
        if (emitResult.diagnostics.length !== 0 || emitResult.emitSkipped) {
            return;
        }
        const dir = process.cwd();
        filesChanged(diagnostics.length === 0, programBuilder.getSourceFiles().map((sf) => relative(dir, sf.fileName)), emitResult.emittedFiles?.map((file) => relative(dir, file)) ?? []).catch((e) => {
            console.error('Error handling file changes:');
            console.error(e);
            console.error(e.stack);
        });
    };
    const watcher = ts.createWatchProgram(host);
    return {
        close: () => {
            watchers.forEach((w) => w.close());
            watcher.close();
        },
    };
}
function dumpDiagnostic(diagnostic) {
    let message = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\n');
    if (diagnostic.file) {
        if (diagnostic.start) {
            const { line, character } = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);
            message = `${diagnostic.file.fileName} (${line + 1},${character + 1}): ${message}`;
        }
        else {
            message = `${diagnostic.file.fileName}: ${message}`;
        }
    }
    console.log(message);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb21waWxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUU1QixNQUFNLFVBQVUsS0FBSyxDQUNuQixZQUlrQjtJQUVsQixNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pELElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMsdUNBQXVDLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBQ0QsTUFBTSxRQUFRLEdBQUcsQ0FBQyxjQUFjLEVBQUUsbUJBQW1CLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxHQUFHLENBQzFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FDUCxTQUFTLENBQ1AsSUFBSSxFQUNKLEdBQUcsRUFBRTtRQUNILFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUN6QyxPQUFPLENBQUMsS0FBSyxDQUFDLDhCQUE4QixDQUFDLENBQUM7WUFDOUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsRUFDRCxHQUFHLENBQ0osQ0FDSixDQUFDO0lBQ0YsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUNyQyxlQUFlLEVBQ2Y7UUFDRSxnQkFBZ0IsRUFBRSxJQUFJO0tBQ3ZCLEVBQ0QsRUFBRSxDQUFDLEdBQUcsRUFDTixTQUFTLEVBQ1QsU0FBUyxFQUNULFNBQVMsRUFDVDtRQUNFLFlBQVksRUFBRSxDQUFDLGNBQWMsQ0FBQztLQUMvQixDQUNGLENBQUM7SUFDRixJQUFJLENBQUMsa0JBQWtCLEdBQUcsQ0FBQyxjQUFjLEVBQUUsRUFBRTtRQUMzQyxNQUFNLE9BQU8sR0FBRyxjQUFjLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDNUMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3RELFdBQVcsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDcEMsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2xDLFVBQVUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQy9DLElBQUksVUFBVSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNsRSxPQUFPO1FBQ1QsQ0FBQztRQUNELE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUMxQixZQUFZLENBQ1YsV0FBVyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQ3hCLGNBQWMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQ3ZFLFVBQVUsQ0FBQyxZQUFZLEVBQUUsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxDQUNsRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ1osT0FBTyxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1lBQzlDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakIsT0FBTyxDQUFDLEtBQUssQ0FBRSxDQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7SUFDRixNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUMsT0FBTztRQUNMLEtBQUssRUFBRSxHQUFHLEVBQUU7WUFDVixRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUNuQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDbEIsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBUyxjQUFjLENBQUMsVUFBeUI7SUFDL0MsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDLDRCQUE0QixDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDNUUsSUFBSSxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDcEIsSUFBSSxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDckIsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLDZCQUE2QixDQUN2RSxVQUFVLENBQUMsS0FBSyxDQUNqQixDQUFDO1lBQ0YsT0FBTyxHQUFHLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUssSUFBSSxHQUFHLENBQUMsSUFDaEQsU0FBUyxHQUFHLENBQ2QsTUFBTSxPQUFPLEVBQUUsQ0FBQztRQUNsQixDQUFDO2FBQU0sQ0FBQztZQUNOLE9BQU8sR0FBRyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxLQUFLLE9BQU8sRUFBRSxDQUFDO1FBQ3RELENBQUM7SUFDSCxDQUFDO0lBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN2QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVsYXRpdmUgfSBmcm9tICdub2RlOnBhdGgnO1xuaW1wb3J0IHRzIGZyb20gJ3R5cGVzY3JpcHQnO1xuXG5leHBvcnQgZnVuY3Rpb24gd2F0Y2goXG4gIGZpbGVzQ2hhbmdlZDogKFxuICAgIHN1Y2Nlc3M6IGJvb2xlYW4sXG4gICAgaW5wdXRGaWxlczogc3RyaW5nW10sXG4gICAgb3V0cHV0RmlsZXM6IHN0cmluZ1tdXG4gICkgPT4gUHJvbWlzZTx2b2lkPlxuKTogeyBjbG9zZTogKCkgPT4gdm9pZCB9IHtcbiAgY29uc3Qgd2F0Y2hGaWxlID0gdHMuc3lzLndhdGNoRmlsZT8uYmluZCh0cy5zeXMpO1xuICBpZiAoIXdhdGNoRmlsZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignd2F0Y2hGaWxlIG1pc3NpbmcgZnJvbSB0eXBlc2NyaXB0IHN5cycpO1xuICB9XG4gIGNvbnN0IHdhdGNoZXJzID0gWydwYWNrYWdlLmpzb24nLCAncGFja2FnZS1sb2NrLmpzb24nLCAnZGljdGlvbmFyeS50eHQnXS5tYXAoXG4gICAgKGZpbGUpID0+XG4gICAgICB3YXRjaEZpbGUoXG4gICAgICAgIGZpbGUsXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICBmaWxlc0NoYW5nZWQodHJ1ZSwgW2ZpbGVdLCBbXSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGhhbmRsaW5nIGZpbGUgY2hhbmdlczonKTtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIDUwMFxuICAgICAgKVxuICApO1xuICBjb25zdCBob3N0ID0gdHMuY3JlYXRlV2F0Y2hDb21waWxlckhvc3QoXG4gICAgJ3RzY29uZmlnLmpzb24nLFxuICAgIHtcbiAgICAgIGxpc3RFbWl0dGVkRmlsZXM6IHRydWUsXG4gICAgfSxcbiAgICB0cy5zeXMsXG4gICAgdW5kZWZpbmVkLFxuICAgIHVuZGVmaW5lZCxcbiAgICB1bmRlZmluZWQsXG4gICAge1xuICAgICAgZXhjbHVkZUZpbGVzOiBbJ3BhY2thZ2UuanNvbiddLFxuICAgIH1cbiAgKTtcbiAgaG9zdC5hZnRlclByb2dyYW1DcmVhdGUgPSAocHJvZ3JhbUJ1aWxkZXIpID0+IHtcbiAgICBjb25zdCBwcm9ncmFtID0gcHJvZ3JhbUJ1aWxkZXIuZ2V0UHJvZ3JhbSgpO1xuICAgIGNvbnN0IGRpYWdub3N0aWNzID0gdHMuZ2V0UHJlRW1pdERpYWdub3N0aWNzKHByb2dyYW0pO1xuICAgIGRpYWdub3N0aWNzLmZvckVhY2goZHVtcERpYWdub3N0aWMpO1xuICAgIGNvbnN0IGVtaXRSZXN1bHQgPSBwcm9ncmFtLmVtaXQoKTtcbiAgICBlbWl0UmVzdWx0LmRpYWdub3N0aWNzLmZvckVhY2goZHVtcERpYWdub3N0aWMpO1xuICAgIGlmIChlbWl0UmVzdWx0LmRpYWdub3N0aWNzLmxlbmd0aCAhPT0gMCB8fCBlbWl0UmVzdWx0LmVtaXRTa2lwcGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGRpciA9IHByb2Nlc3MuY3dkKCk7XG4gICAgZmlsZXNDaGFuZ2VkKFxuICAgICAgZGlhZ25vc3RpY3MubGVuZ3RoID09PSAwLFxuICAgICAgcHJvZ3JhbUJ1aWxkZXIuZ2V0U291cmNlRmlsZXMoKS5tYXAoKHNmKSA9PiByZWxhdGl2ZShkaXIsIHNmLmZpbGVOYW1lKSksXG4gICAgICBlbWl0UmVzdWx0LmVtaXR0ZWRGaWxlcz8ubWFwKChmaWxlKSA9PiByZWxhdGl2ZShkaXIsIGZpbGUpKSA/PyBbXVxuICAgICkuY2F0Y2goKGUpID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGhhbmRsaW5nIGZpbGUgY2hhbmdlczonKTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICBjb25zb2xlLmVycm9yKChlIGFzIEVycm9yKS5zdGFjayk7XG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IHdhdGNoZXIgPSB0cy5jcmVhdGVXYXRjaFByb2dyYW0oaG9zdCk7XG4gIHJldHVybiB7XG4gICAgY2xvc2U6ICgpID0+IHtcbiAgICAgIHdhdGNoZXJzLmZvckVhY2goKHcpID0+IHcuY2xvc2UoKSk7XG4gICAgICB3YXRjaGVyLmNsb3NlKCk7XG4gICAgfSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gZHVtcERpYWdub3N0aWMoZGlhZ25vc3RpYzogdHMuRGlhZ25vc3RpYykge1xuICBsZXQgbWVzc2FnZSA9IHRzLmZsYXR0ZW5EaWFnbm9zdGljTWVzc2FnZVRleHQoZGlhZ25vc3RpYy5tZXNzYWdlVGV4dCwgJ1xcbicpO1xuICBpZiAoZGlhZ25vc3RpYy5maWxlKSB7XG4gICAgaWYgKGRpYWdub3N0aWMuc3RhcnQpIHtcbiAgICAgIGNvbnN0IHsgbGluZSwgY2hhcmFjdGVyIH0gPSBkaWFnbm9zdGljLmZpbGUuZ2V0TGluZUFuZENoYXJhY3Rlck9mUG9zaXRpb24oXG4gICAgICAgIGRpYWdub3N0aWMuc3RhcnRcbiAgICAgICk7XG4gICAgICBtZXNzYWdlID0gYCR7ZGlhZ25vc3RpYy5maWxlLmZpbGVOYW1lfSAoJHtsaW5lICsgMX0sJHtcbiAgICAgICAgY2hhcmFjdGVyICsgMVxuICAgICAgfSk6ICR7bWVzc2FnZX1gO1xuICAgIH0gZWxzZSB7XG4gICAgICBtZXNzYWdlID0gYCR7ZGlhZ25vc3RpYy5maWxlLmZpbGVOYW1lfTogJHttZXNzYWdlfWA7XG4gICAgfVxuICB9XG4gIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xufVxuIl19