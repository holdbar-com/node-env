import { spellCheckFile } from 'cspell-lib';
import { readFile } from 'node:fs/promises';
import { EOL } from 'node:os';
import { resolve } from 'node:path';
export function isDictionary(files) {
    return files.length === 1 && files[0] === 'dictionary.txt';
}
export async function spelling(files) {
    const words = await readWords();
    const dir = process.cwd();
    const results = await Promise.all(files.map((file) => spellCheckFile(resolve(dir, file), { generateSuggestions: false }, { noConfigSearch: true, words })));
    const errors = results.flatMap((r) => r.errors).filter((e) => !!e);
    if (errors.length !== 0) {
        errors.forEach((e) => console.error(e));
        return false;
    }
    const bad = results
        .map((r, ix) => r.issues.length !== 0
        ? `Unknown words in ${files[ix] ?? ''}: ${r.issues
            .map((i) => `"${i.text}"`)
            .join(',')}`
        : undefined)
        .filter((file) => !!file);
    if (bad.length !== 0) {
        console.error(bad.join(EOL));
        return false;
    }
    return true;
}
async function readWords() {
    try {
        const dictionary = await readFile('dictionary.txt');
        return dictionary
            .toString('utf8')
            .split('\n')
            .filter((l) => !!l)
            .map((l) => l.trim());
    }
    catch (e) {
        if (isNotFound(e)) {
            return [];
        }
        throw e;
    }
}
function isNotFound(e) {
    return e.code === 'ENOENT';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlbGxpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzcGVsbGluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzVDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQzlCLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFcEMsTUFBTSxVQUFVLFlBQVksQ0FBQyxLQUFlO0lBQzFDLE9BQU8sS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLGdCQUFnQixDQUFDO0FBQzdELENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLFFBQVEsQ0FBQyxLQUFlO0lBQzVDLE1BQU0sS0FBSyxHQUFHLE1BQU0sU0FBUyxFQUFFLENBQUM7SUFDaEMsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FDL0IsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQ2pCLGNBQWMsQ0FDWixPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUNsQixFQUFFLG1CQUFtQixFQUFFLEtBQUssRUFBRSxFQUM5QixFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQ2hDLENBQ0YsQ0FDRixDQUFDO0lBQ0YsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25FLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUN4QixNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEMsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBQ0QsTUFBTSxHQUFHLEdBQUcsT0FBTztTQUNoQixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FDYixDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxvQkFBb0IsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsTUFBTTthQUM3QyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDO2FBQ3pCLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNoQixDQUFDLENBQUMsU0FBUyxDQUNkO1NBQ0EsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFNUIsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQ3JCLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzdCLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVELEtBQUssVUFBVSxTQUFTO0lBQ3RCLElBQUksQ0FBQztRQUNILE1BQU0sVUFBVSxHQUFHLE1BQU0sUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDcEQsT0FBTyxVQUFVO2FBQ2QsUUFBUSxDQUFDLE1BQU0sQ0FBQzthQUNoQixLQUFLLENBQUMsSUFBSSxDQUFDO2FBQ1gsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2xCLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDWCxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ2xCLE9BQU8sRUFBRSxDQUFDO1FBQ1osQ0FBQztRQUNELE1BQU0sQ0FBQyxDQUFDO0lBQ1YsQ0FBQztBQUNILENBQUM7QUFFRCxTQUFTLFVBQVUsQ0FBQyxDQUFVO0lBQzVCLE9BQVEsQ0FBdUIsQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDO0FBQ3BELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzcGVsbENoZWNrRmlsZSB9IGZyb20gJ2NzcGVsbC1saWInO1xuaW1wb3J0IHsgcmVhZEZpbGUgfSBmcm9tICdub2RlOmZzL3Byb21pc2VzJztcbmltcG9ydCB7IEVPTCB9IGZyb20gJ25vZGU6b3MnO1xuaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gJ25vZGU6cGF0aCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RpY3Rpb25hcnkoZmlsZXM6IHN0cmluZ1tdKSB7XG4gIHJldHVybiBmaWxlcy5sZW5ndGggPT09IDEgJiYgZmlsZXNbMF0gPT09ICdkaWN0aW9uYXJ5LnR4dCc7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzcGVsbGluZyhmaWxlczogc3RyaW5nW10pIHtcbiAgY29uc3Qgd29yZHMgPSBhd2FpdCByZWFkV29yZHMoKTtcbiAgY29uc3QgZGlyID0gcHJvY2Vzcy5jd2QoKTtcbiAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgIGZpbGVzLm1hcCgoZmlsZSkgPT5cbiAgICAgIHNwZWxsQ2hlY2tGaWxlKFxuICAgICAgICByZXNvbHZlKGRpciwgZmlsZSksXG4gICAgICAgIHsgZ2VuZXJhdGVTdWdnZXN0aW9uczogZmFsc2UgfSxcbiAgICAgICAgeyBub0NvbmZpZ1NlYXJjaDogdHJ1ZSwgd29yZHMgfVxuICAgICAgKVxuICAgIClcbiAgKTtcbiAgY29uc3QgZXJyb3JzID0gcmVzdWx0cy5mbGF0TWFwKChyKSA9PiByLmVycm9ycykuZmlsdGVyKChlKSA9PiAhIWUpO1xuICBpZiAoZXJyb3JzLmxlbmd0aCAhPT0gMCkge1xuICAgIGVycm9ycy5mb3JFYWNoKChlKSA9PiBjb25zb2xlLmVycm9yKGUpKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgYmFkID0gcmVzdWx0c1xuICAgIC5tYXAoKHIsIGl4KSA9PlxuICAgICAgci5pc3N1ZXMubGVuZ3RoICE9PSAwXG4gICAgICAgID8gYFVua25vd24gd29yZHMgaW4gJHtmaWxlc1tpeF0gPz8gJyd9OiAke3IuaXNzdWVzXG4gICAgICAgICAgICAubWFwKChpKSA9PiBgXCIke2kudGV4dH1cImApXG4gICAgICAgICAgICAuam9pbignLCcpfWBcbiAgICAgICAgOiB1bmRlZmluZWRcbiAgICApXG4gICAgLmZpbHRlcigoZmlsZSkgPT4gISFmaWxlKTtcblxuICBpZiAoYmFkLmxlbmd0aCAhPT0gMCkge1xuICAgIGNvbnNvbGUuZXJyb3IoYmFkLmpvaW4oRU9MKSk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZWFkV29yZHMoKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgZGljdGlvbmFyeSA9IGF3YWl0IHJlYWRGaWxlKCdkaWN0aW9uYXJ5LnR4dCcpO1xuICAgIHJldHVybiBkaWN0aW9uYXJ5XG4gICAgICAudG9TdHJpbmcoJ3V0ZjgnKVxuICAgICAgLnNwbGl0KCdcXG4nKVxuICAgICAgLmZpbHRlcigobCkgPT4gISFsKVxuICAgICAgLm1hcCgobCkgPT4gbC50cmltKCkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGlzTm90Rm91bmQoZSkpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgdGhyb3cgZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc05vdEZvdW5kKGU6IHVua25vd24pIHtcbiAgcmV0dXJuIChlIGFzIHsgY29kZT86IHN0cmluZyB9KS5jb2RlID09PSAnRU5PRU5UJztcbn1cbiJdfQ==